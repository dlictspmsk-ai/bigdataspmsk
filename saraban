import React, { useState, useRef, useEffect } from 'react';
import { FileText, Bell, BarChart3, Inbox, Edit, Search, User, Settings, LogOut, CheckCircle, XCircle, Eraser, Menu, X, Send, FilePlus, Filter, AlertTriangle } from 'lucide-react';

// --- Helper Functions (ฟังก์ชันช่วยเหลือ) ---
const getStatusColor = (status) => {
  switch (status) {
    case 'รอลงนาม': return 'bg-yellow-100 text-yellow-800';
    case 'อนุมัติแล้ว': return 'bg-green-100 text-green-800';
    case 'เสร็จสิ้น': return 'bg-blue-100 text-blue-800';
    case 'ปฏิเสธ': return 'bg-red-100 text-red-800';
    default: return 'bg-gray-100 text-gray-800';
  }
};

// --- Reusable Components (คอมโพเนนต์ที่ใช้ซ้ำ) ---
const StatCard = ({ icon, title, value, color }) => (
    <div className="bg-white p-4 sm:p-6 rounded-xl shadow-md flex items-center space-x-4 transition-transform transform hover:scale-105">
      <div className={`p-3 rounded-full ${color}`}>{icon}</div>
      <div>
        <p className="text-sm text-gray-500">{title}</p>
        <p className="text-2xl font-bold text-gray-800">{value}</p>
      </div>
    </div>
);

const SidebarMenuItem = ({ icon, text, active, onClick }) => (
    <a href="#" className={`flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${active ? 'bg-blue-800 text-white shadow-lg' : 'text-gray-600 hover:bg-blue-50 hover:text-blue-800'}`} onClick={(e) => { e.preventDefault(); onClick(); }}>
      {icon}
      <span className="font-semibold">{text}</span>
    </a>
);

// --- Page Components (คอมโพเนนต์หน้าต่างๆ) ---

const LoginPage = ({ onLogin }) => {
    return (
        <div className="min-h-screen bg-gray-100 flex flex-col justify-center items-center p-4" style={{ fontFamily: "'Sarabun', sans-serif" }}>
            <div className="w-full max-w-sm">
                <div className="flex justify-center items-center mb-6">
                    <img src="https://placehold.co/60x60/1D4ED8/FFFFFF?text=ตรา" alt="โลโก้หน่วยงาน" className="rounded-full" />
                    <h1 className="ml-4 text-2xl font-bold text-gray-800">ระบบสำนักงานอิเล็กทรอนิกส์</h1>
                </div>
                <div className="bg-white p-8 rounded-2xl shadow-lg">
                    <h2 className="text-xl font-bold text-center text-gray-700 mb-2">เข้าสู่ระบบ</h2>
                    <p className="text-center text-gray-500 mb-6 text-sm">กรุณาใส่ชื่อผู้ใช้และรหัสผ่านของท่าน</p>
                    <form onSubmit={(e) => { e.preventDefault(); onLogin(); }}>
                        <div className="mb-4">
                            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="username">ชื่อผู้ใช้</label>
                            <input className="shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" id="username" type="text" placeholder="username" defaultValue="somchai" />
                        </div>
                        <div className="mb-6">
                            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="password">รหัสผ่าน</label>
                            <input className="shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 mb-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" id="password" type="password" placeholder="******************" defaultValue="password" />
                        </div>
                        <div className="flex items-center justify-between">
                            <button className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg focus:outline-none focus:shadow-outline transition-colors" type="submit">
                                เข้าสู่ระบบ
                            </button>
                        </div>
                    </form>
                </div>
                <p className="text-center text-gray-500 text-xs mt-6">&copy;2568 หน่วยงานราชการไทย</p>
            </div>
        </div>
    );
};

const DashboardPage = ({ onMenuClick }) => (
    <>
        <header className="flex justify-between items-center mb-8">
            <div className="flex items-center space-x-4">
                 <button onClick={onMenuClick} className="lg:hidden p-2 rounded-md hover:bg-gray-200"><Menu size={24} className="text-gray-600"/></button>
                <div>
                    <h2 className="text-2xl sm:text-3xl font-bold text-gray-800">แดชบอร์ด</h2>
                    <p className="text-gray-500 mt-1 text-sm sm:text-base">ภาพรวมของระบบและเอกสารล่าสุด</p>
                </div>
            </div>
             <div className="flex items-center space-x-2 sm:space-x-4">
              <div className="relative"><Bell size={24} className="text-gray-600 cursor-pointer hover:text-blue-700"/><span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs w-4 h-4 flex items-center justify-center rounded-full">2</span></div>
              <div className="hidden sm:flex items-center space-x-2 border-l pl-4">
                <User size={32} className="p-1 bg-gray-200 text-gray-600 rounded-full" />
                <div><p className="font-semibold text-sm text-gray-800">สมชาย ใจดี</p><p className="text-xs text-gray-500">ผู้อำนวยการ</p></div>
              </div>
            </div>
        </header>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <StatCard icon={<FileText size={24} className="text-yellow-600" />} title="เอกสารรอลงนาม" value="2" color="bg-yellow-100" />
            <StatCard icon={<Inbox size={24} className="text-blue-600" />} title="เอกสารเข้าใหม่" value="5" color="bg-blue-100" />
            <StatCard icon={<FileText size={24} className="text-green-600" />} title="เอกสารอนุมัติแล้ว" value="18" color="bg-green-100" />
            <StatCard icon={<Bell size={24} className="text-red-600" />} title="เรื่องด่วน" value="1" color="bg-red-100" />
        </div>
    </>
);

const DocumentManagementPage = ({ onMenuClick, onExportClick }) => {
    const [documents, setDocuments] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [filter, setFilter] = useState('ทั้งหมด');
    const [searchTerm, setSearchTerm] = useState('');

    useEffect(() => {
        const apiUrl = 'http://localhost:3001/api/documents';

        fetch(apiUrl)
            .then(response => {
                if (!response.ok) {
                    throw new Error('ไม่สามารถเชื่อมต่อกับเซิร์ฟเวอร์ได้');
                }
                return response.json();
            })
            .then(data => {
                setDocuments(data);
                setLoading(false);
            })
            .catch(err => {
                setError(err.message);
                setLoading(false);
            });
    }, []);

    const filteredDocuments = documents.filter(doc => {
        const statusMatch = filter === 'ทั้งหมด' || doc.status === filter;
        const searchMatch = doc.title.toLowerCase().includes(searchTerm.toLowerCase()) || (doc.id && doc.id.toString().toLowerCase().includes(searchTerm.toLowerCase()));
        return statusMatch && searchMatch;
    });

    return (
        <>
            <header className="flex items-center mb-8"><button onClick={onMenuClick} className="lg:hidden p-2 rounded-md hover:bg-gray-200 mr-2"><Menu size={24} className="text-gray-600"/></button><div><h2 className="text-2xl sm:text-3xl font-bold text-gray-800">จัดการเอกสาร</h2><p className="text-gray-500 mt-1 text-sm sm:text-base">ค้นหา จัดการ และสร้างเอกสารใหม่</p></div></header>
            <div className="bg-white p-4 sm:p-6 rounded-xl shadow-md">
                <div className="flex flex-col sm:flex-row justify-between items-center mb-4 gap-4">
                    <div className="relative w-full sm:w-auto"><Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} /><input type="text" placeholder="ค้นหาเอกสาร..." className="pl-10 pr-4 py-2 w-full sm:w-64 rounded-lg border focus:ring-2 focus:ring-blue-500 outline-none transition" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} /></div>
                    <div className="flex items-center gap-2">
                        <Filter size={16} className="text-gray-500"/>
                        {['ทั้งหมด', 'รอลงนาม', 'อนุมัติแล้ว', 'ปฏิเสธ'].map(status => (
                            <button key={status} onClick={() => setFilter(status)} className={`px-3 py-1 text-sm rounded-full transition ${filter === status ? 'bg-blue-600 text-white font-semibold' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}>{status}</button>
                        ))}
                    </div>
                </div>
                <div className="overflow-x-auto">
                    {loading && <p className="text-center p-4">กำลังโหลดข้อมูลเอกสาร...</p>}
                    {error && <div className="text-center p-4 text-red-600 bg-red-50 rounded-lg flex items-center justify-center gap-2"><AlertTriangle size={20}/> {error} (กรุณาตรวจสอบว่า Backend API ทำงานอยู่)</div>}
                    {!loading && !error && (
                        <table className="w-full text-left">
                            <thead><tr className="border-b text-sm text-gray-500"><th className="p-2 font-semibold">เลขที่เอกสาร</th><th className="p-2 font-semibold">ชื่อเอกสาร</th><th className="p-2 font-semibold">สถานะ</th><th className="p-2 font-semibold">การดำเนินการ</th></tr></thead>
                            <tbody>
                                {filteredDocuments.map(doc => (
                                    <tr key={doc.id} className="border-b hover:bg-gray-50">
                                        <td className="p-2 text-sm text-gray-600">{doc.id}</td>
                                        <td className="p-2 font-medium text-gray-800 text-sm">{doc.title}</td>
                                        <td className="p-2"><span className={`px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(doc.status)}`}>{doc.status}</span></td>
                                        <td className="p-2">
                                            {doc.status === 'อนุมัติแล้ว' ? (
                                                <button onClick={() => onExportClick(doc)} className="flex items-center gap-1 text-sm bg-indigo-100 text-indigo-700 px-2 py-1 rounded-md hover:bg-indigo-200 transition">
                                                    <Send size={14} /> ส่งออก
                                                </button>
                                            ) : (
                                                <button className="text-sm text-gray-400 px-2 py-1" disabled>ไม่มี</button>
                                            )}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    )}
                </div>
            </div>
        </>
    );
};

const SigningPage = ({ onMenuClick }) => {
    const [signature, setSignature] = useState(null);
    const handleSaveSignature = (data) => setSignature(data);
    const handleApprove = () => console.log("เอกสารได้รับการอนุมัติ");
    const handleReject = () => console.log("เอกสารถูกปฏิเสธ");

    return (
        <>
            <header className="flex items-center mb-8">
                 <button onClick={onMenuClick} className="lg:hidden p-2 rounded-md hover:bg-gray-200 mr-2"><Menu size={24} className="text-gray-600"/></button>
                <div><h2 className="text-2xl sm:text-3xl font-bold text-gray-800">ลงนามเอกสาร</h2><p className="text-gray-500 mt-1 text-sm sm:text-base">ตรวจสอบและลงนามในเอกสาร</p></div>
            </header>
            <div className="grid grid-cols-1 lg:grid-cols-5 gap-8">
                <div className="lg:col-span-3 bg-white p-4 sm:p-6 rounded-xl shadow-md">
                    <h3 className="text-xl font-bold text-gray-800 mb-2">โครงการจัดซื้อคอมพิวเตอร์ประจำปี 2568</h3>
                    <div className="flex justify-between text-sm text-gray-500 border-b pb-4 mb-4"><span>จาก: ฝ่ายเทคโนโลยีสารสนเทศ</span><span>วันที่: 04/08/2568</span></div>
                    <div className="space-y-4 text-gray-700 text-sm sm:text-base"><div className="h-96 bg-gray-100 border rounded-lg flex items-center justify-center text-gray-400">[ พื้นที่แสดงตัวอย่างเอกสาร PDF ]</div></div>
                </div>
                <div className="lg:col-span-2 space-y-6">
                    <div className="bg-white p-4 sm:p-6 rounded-xl shadow-md">
                        <h3 className="text-xl font-bold text-gray-800 mb-4">พื้นที่ลงนาม</h3>
                        <SignaturePad onSave={handleSaveSignature} />
                        {signature && (
                            <div className="mt-4 p-2 border rounded-lg bg-green-50">
                                <p className="text-sm font-semibold text-green-700 mb-2">ตัวอย่างลายเซ็น:</p>
                                <img src={signature} alt="ลายเซ็น" className="border rounded-md mx-auto bg-white" style={{maxHeight: '80px'}}/>
                            </div>
                        )}
                    </div>
                     <div className="bg-white p-4 sm:p-6 rounded-xl shadow-md flex justify-around">
                        <button onClick={handleApprove} className="flex items-center space-x-2 px-4 py-2 sm:px-6 sm:py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition font-bold text-base sm:text-lg disabled:bg-gray-300" disabled={!signature}><CheckCircle size={24} /><span>อนุมัติ</span></button>
                        <button onClick={handleReject} className="flex items-center space-x-2 px-4 py-2 sm:px-6 sm:py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition font-bold text-base sm:text-lg"><XCircle size={24} /><span>ปฏิเสธ</span></button>
                    </div>
                </div>
            </div>
        </>
    );
};

const SignaturePad = ({ onSave }) => {
    const canvasRef = useRef(null);
    const [isDrawing, setIsDrawing] = useState(false);

    useEffect(() => {
        const canvas = canvasRef.current;
        const ctx = canvas.getContext('2d');

        const resizeCanvas = () => {
            const parent = canvas.parentElement;
            if (parent) {
                canvas.width = parent.clientWidth;
                canvas.height = parent.clientWidth / 2.5;
            }
            ctx.strokeStyle = '#000000';
            ctx.lineWidth = 2;
            ctx.lineCap = 'round';
        };

        const getCoords = (e) => {
            const rect = canvas.getBoundingClientRect();
            if (e.touches && e.touches.length > 0) {
                return { offsetX: e.touches[0].clientX - rect.left, offsetY: e.touches[0].clientY - rect.top };
            }
            return { offsetX: e.offsetX, offsetY: e.offsetY };
        };

        const startDrawing = (e) => { e.preventDefault(); const { offsetX, offsetY } = getCoords(e); ctx.beginPath(); ctx.moveTo(offsetX, offsetY); setIsDrawing(true); };
        const draw = (e) => { e.preventDefault(); if (!isDrawing) return; const { offsetX, offsetY } = getCoords(e); ctx.lineTo(offsetX, offsetY); ctx.stroke(); };
        const stopDrawing = () => { ctx.closePath(); setIsDrawing(false); };

        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseleave', stopDrawing);
        canvas.addEventListener('touchstart', startDrawing, { passive: false });
        canvas.addEventListener('touchmove', draw, { passive: false });
        canvas.addEventListener('touchend', stopDrawing);

        return () => {
            window.removeEventListener('resize', resizeCanvas);
            canvas.removeEventListener('mousedown', startDrawing);
            canvas.removeEventListener('mousemove', draw);
            canvas.removeEventListener('mouseup', stopDrawing);
            canvas.removeEventListener('mouseleave', stopDrawing);
            canvas.removeEventListener('touchstart', startDrawing);
            canvas.removeEventListener('touchmove', draw);
            canvas.removeEventListener('touchend', stopDrawing);
        };
    }, [isDrawing]);

    const clearSignature = () => {
        const canvas = canvasRef.current;
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    };
    
    const saveSignature = () => {
        const canvas = canvasRef.current;
        const signatureImage = canvas.toDataURL('image/png');
        onSave(signatureImage);
    };

    return (
        <div className="bg-gray-100 p-4 rounded-lg border-2 border-dashed">
            <canvas ref={canvasRef} className="bg-white rounded-md w-full"></canvas>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 space-y-2 sm:space-y-0">
                <p className="text-sm text-gray-500">กรุณาลงลายมือชื่อ</p>
                <div className="flex space-x-2">
                    <button onClick={clearSignature} className="flex items-center space-x-2 px-3 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition"><Eraser size={18} /><span>ล้าง</span></button>
                    <button onClick={saveSignature} className="flex items-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"><CheckCircle size={18} /><span>ยืนยัน</span></button>
                </div>
            </div>
        </div>
    );
};

const PlaceholderPage = ({ title, onMenuClick }) => (
     <header className="flex items-center mb-8">
         <button onClick={onMenuClick} className="lg:hidden p-2 rounded-md hover:bg-gray-200 mr-2">
            <Menu size={24} className="text-gray-600"/>
        </button>
        <div>
            <h2 className="text-2xl sm:text-3xl font-bold text-gray-800">{title}</h2>
            <p className="text-gray-500 mt-1 text-sm sm:text-base">หน้านี้อยู่ในระหว่างการพัฒนา</p>
        </div>
    </header>
);

// --- Main App Component (คอมโพเนนต์หลัก) ---
export default function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [activeMenu, setActiveMenu] = useState('แดชบอร์ด');
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [exportingDoc, setExportingDoc] = useState(null);

  const handleMenuClick = (menu) => {
    setActiveMenu(menu);
    setIsSidebarOpen(false);
  }

  const renderContent = () => {
    const pageProps = { 
        onMenuClick: () => setIsSidebarOpen(true),
        onExportClick: (doc) => setExportingDoc(doc)
    };
    switch (activeMenu) {
        case 'แดชบอร์ด': return <DashboardPage {...pageProps} />;
        case 'จัดการเอกสาร': return <DocumentManagementPage {...pageProps} />;
        case 'ลงนามเอกสาร': return <SigningPage {...pageProps} />;
        default: return <PlaceholderPage title={activeMenu} {...pageProps} />;
    }
  };

  if (!isLoggedIn) {
      return <LoginPage onLogin={() => setIsLoggedIn(true)} />;
  }

  return (
    <div className="min-h-screen bg-gray-50 font-sans" style={{ fontFamily: "'Sarabun', sans-serif" }}>
      <div className="relative flex min-h-screen">
        {isSidebarOpen && <div className="fixed inset-0 bg-black bg-opacity-50 z-20 lg:hidden" onClick={() => setIsSidebarOpen(false)}></div>}
        <aside className={`fixed lg:relative inset-y-0 left-0 w-64 bg-white p-4 flex-shrink-0 shadow-lg flex flex-col z-30 transform ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'} lg:translate-x-0 transition-transform duration-300 ease-in-out`}>
          <div className="flex items-center justify-between mb-8 px-2">
            <div className="flex items-center space-x-2"><img src="https://placehold.co/40x40/2D3748/FFFFFF?text=ตรา" alt="โลโก้หน่วยงาน" className="rounded-full" /><h1 className="text-lg font-bold text-gray-800">E-Office</h1></div>
            <button onClick={() => setIsSidebarOpen(false)} className="lg:hidden p-1 rounded-md hover:bg-gray-200"><X size={20} className="text-gray-600"/></button>
          </div>
          <nav className="flex flex-col space-y-2">
            <SidebarMenuItem icon={<BarChart3 size={20} />} text="แดชบอร์ด" active={activeMenu === 'แดชบอร์ด'} onClick={() => handleMenuClick('แดชบอร์ด')} />
            <SidebarMenuItem icon={<Inbox size={20} />} text="จัดการเอกสาร" active={activeMenu === 'จัดการเอกสาร'} onClick={() => handleMenuClick('จัดการเอกสาร')} />
            <SidebarMenuItem icon={<Edit size={20} />} text="ลงนามเอกสาร" active={activeMenu === 'ลงนามเอกสาร'} onClick={() => handleMenuClick('ลงนามเอกสาร')} />
            <SidebarMenuItem icon={<Bell size={20} />} text="การแจ้งเตือน" active={activeMenu === 'การแจ้งเตือน'} onClick={() => handleMenuClick('การแจ้งเตือน')} />
          </nav>
          <div className="mt-auto">
             <SidebarMenuItem icon={<Settings size={20} />} text="ตั้งค่า" active={activeMenu === 'ตั้งค่า'} onClick={() => handleMenuClick('ตั้งค่า')} />
             <SidebarMenuItem icon={<LogOut size={20} />} text="ออกจากระบบ" active={false} onClick={() => setIsLoggedIn(false)} />
          </div>
        </aside>
        <main className="flex-1 p-4 sm:p-6 lg:p-8 overflow-y-auto w-full">
          {renderContent()}
        </main>
        {/* ... (Modal components would go here) ... */}
      </div>
    </div>
  );
}
